ipblock - A Python module for manipulating IP address blocks

# Copyright (c) 2007,2011 Michael Dillon
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#  -  Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  -  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the distribution.
#  -  Neither the name of the developing organization nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

This module is intended to be used to manipulate large numbers of
IP addresses, address ranges, and CIDR blocks. It would be used in
network analysis applications, capacity management, log analysis
and so on. For instance, import full global routing tables from
several large providers and determine which ip address ranges are
only found in one place. Or import all router configurations from 
a network and identify the IP address ranges actually in use to
compare with a network inventory database.

If you deal with ARIN and RIPE or work in a large ISP then this module might be useful to you.

As a result of this goal, the memory representation of address objects is kept as small as possible so that very large numbers of object can be processed. I haven't yet benchmarked the scalability of the IPv4Range methods which is most likely to be the bottleneck.

The only API docs at present are in the SVN trunk in ipv4doc.txt and were generated by pydoc. You can see the class hierarchy and some of the methods are briefly documented.

There are unit tests, for instance python ipv4test.py will run the unittests for the ipv4.py module. The test coverage needs more work, i.e. I started writing this using TDD but as I got into more complex bits, I didn't write the tests that I should have.

Please ignore the ipv6 module for now. It is only a stub which has yet to be written.

